SELECT * FROM playstore;

ALTER TABLE playstore MODIFY COLUMN rating DOUBLE;

ALTER TABLE playstore MODIFY COLUMN reviews BIGINT;

ALTER TABLE playstore MODIFY COLUMN installs BIGINT;

ALTER TABLE playstore MODIFY COLUMN price DOUBLE;

ALTER TABLE playstore MODIFY COLUMN last_updated DATE;

SELECT * FROM reviews;

ALTER TABLE reviews MODIFY COLUMN sentiment_polarity DOUBLE;

ALTER TABLE reviews MODIFY COLUMN sentiment_subjectivity DOUBLE;

-- Identifying NULL values.
SELECT *
FROM playstore
WHERE App IS NULL
OR Category IS NULL
OR Rating IS NULL
OR Reviews IS NULL
OR Size IS NULL
OR Installs IS NULL
OR Type IS NULL
OR Price IS NULL
OR Content_Rating IS NULL
OR Genres IS NULL
OR Last_Updated IS NULL
OR Current_Ver IS NULL
OR Android_Ver IS NULL;

-- Deleting NULL values.
DELETE
FROM playstore
WHERE App IS NULL
OR Category IS NULL
OR Rating IS NULL
OR Reviews IS NULL
OR Size IS NULL
OR Installs IS NULL
OR Type IS NULL
OR Price IS NULL
OR Content_Rating IS NULL
OR Genres IS NULL
OR Last_Updated IS NULL
OR Current_Ver IS NULL
OR Android_Ver IS NULL;

-- Identifying duplicate values.
SELECT 
	App, 
    COUNT(App)
FROM playstore
GROUP BY App
HAVING COUNT(App) > 1;

-- Deleting duplicate values.
DELETE A FROM playstore AS A
INNER JOIN playstore AS B
WHERE 
    A.App = B.App AND
    A.Reviews < B.Reviews;

-- 1) Provide the overview of the dataset by how many total unique apps and categories are in our dataset.
SELECT 
	COUNT(DISTINCT App) AS total_distinct_apps,
	COUNT(DISTINCT Category) AS total_distinct_category
FROM playstore;

-- 2) Retrieve the unique app categories and the count of apps in each category.
SELECT
	Category,
	COUNT(App) AS total_apps
FROM playstore
GROUP BY Category
ORDER BY total_apps DESC;

-- 3) Identify the top-rated free apps.
SELECT
	App,
	Category,
	Rating,
	Reviews
FROM playstore
WHERE TYPE='Free'
ORDER BY Rating DESC
LIMIT 50;

-- 4) Find the apps with the highest number of reviews.
SELECT
	DISTINCT App,
	Category,
	Reviews
FROM playstore
ORDER BY Reviews DESC
LIMIT 10;

-- 5) Calculate the average rating for each app category.
SELECT
	Category,
    AVG(Rating) AS average_rating
FROM playstore
GROUP BY Category
ORDER BY average_rating DESC
LIMIT 10;

-- 6) Total amount of revenue generated by Google Playstore by hosting apps.
SELECT
	SUM(Price*Installs) AS total_revenue
FROM playstore;

-- 7) Identify the app categories with the highest total number of installs.
SELECT
	Category,
    SUM(Installs) AS total_installs
FROM playstore
GROUP BY Category
ORDER BY SUM(Installs) DESC
LIMIT 10;

-- 8) Find the genre with the most number of published apps.
SELECT
	Genres,
    COUNT(App) AS published_apps
FROM playstore
GROUP BY Genres
ORDER BY published_apps DESC
LIMIT 1;

-- 9) Provide the list of apps that can work on Android version 4.0.3 and up.
SELECT
	DISTINCT App
FROM playstore
WHERE Android_Ver='4.0.3 and up';

-- 10) Identify the best gaming app (the best = having the highest number of reviews).
SELECT
	App,
    Reviews
FROM playstore
WHERE Reviews=(SELECT MAX(Reviews) FROM playstore WHERE Category='GAME')
    AND Category='GAME';

-- 11) Analyze the average sentiment polarity of user reviews for each app category.
SELECT
	Category,
    AVG(sentiment_polarity) AS avg_sent_polarity
FROM playstore
INNER JOIN reviews
ON playstore.App=reviews.App
GROUP BY Category
ORDER BY avg_sent_polarity DESC;

-- 12) Provide the distribution of sentiments across different app categories.
SELECT
	Category,
    Sentiment,
    COUNT(*) AS total_sentiment
FROM playstore
INNER JOIN reviews
ON playstore.App=reviews.App
GROUP BY Category, Sentiment
ORDER BY total_sentiment DESC;

-- 13) Extract all negative sentiment reviews for 'Clash of Clans' with their sentiment polarity and sentiment subjectivity
SELECT
	Translated_Review,
    sentiment_polarity,
    sentiment_subjectivity
FROM reviews
WHERE App='Clash of Clans' AND Sentiment='Negative';